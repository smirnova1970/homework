"""Задача:
Выберите одну или несколько сторонних библиотек Python, например, requests, pandas, numpy, matplotlib, pillow.
После выбора библиотек(-и) изучите документацию к ней(ним), ознакомьтесь с их основными возможностями и функциями. К каждой библиотеке дана ссылка на документацию ниже.
Если вы выбрали:
requests - запросить данные с сайта и вывести их в консоль.
pandas - считать данные из файла, выполнить простой анализ данных (на своё усмотрение) и вывести результаты в консоль.
numpy - создать массив чисел, выполнить математические операции с массивом и вывести результаты в консоль.
matplotlib - визуализировать данные с помощью библиотеки любым удобным для вас инструментом из библиотеки.
pillow - обработать изображение, например, изменить его размер, применить эффекты и сохранить в другой формат.
В приложении к ссылке на GitHub напишите комментарий о возможностях, которые предоставила вам выбранная библиотека и как вы расширили возможности Python с её помощью.
Примечания:
Можете выбрать не более 3-х библиотек для изучения.
Желательно продемонстрировать от 3-х функций/классов/методов/операций из каждой выбранной библиотеки."""
#
# import requests
#
# response = requests.get('https://www.example.com')
# print(response.text)
#
import requests

data = {'key': 'value'}
response = requests.post('https://github.com', data=data)
print(response.text)

"""Синтаксис:
Синтаксис: data=pandas.read_csv(‘filename.txt’, sep=’ ‘, header=None, names=[“Column1”, “Column2”])
Параметры:
filename.txt: Как следует из названия, это имя текстового файла, из которого мы хотим считывать данные.
sep:  это поле-разделитель. В текстовом файле мы используем пробел (‘ ‘) в качестве разделителя.
header:  Это необязательное поле. По умолчанию в качестве заголовка используется первая строка текстового файла. Если 
мы используем header = None, то это создаст заголовок.
names: Мы можем назначить имена столбцов при импорте текстового файла, используя аргумент names."""
import pandas as pd
df = pd.read_csv("gfg.txt", sep=" ")
"""используем функцию read_csv() для чтения csv-файла."""
print(df)

"""NumPy — это открытая бесплатная Python-библиотека для работы с многомерными массивами, этакий питонячий аналог 
Matlab. NumPy чаще всего используют в анализе данных и обучении нейронных сетей — в каждой из этих областей нужно 
проводить много вычислений с такими матрицами.
скачать библиотеку NumPy. Открываем консоль и вводим туда команду: pip install numpy"""
import numpy as np
a = np.array([1, 2, 3])
a2 = np.array([[1, 2, 3], [4, 5, 6]])
a3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
print(a)
# [1 2 3]

print(a2)
# [[1 2 3]
#  [4 5 6]]

print(a3)
# [[[1 2 3]
#   [4 5 6]]
#  [[7 8 9]
#   [10 11 12]]]

"""Matplotlib — популярная Python-библиотека для визуализации данных. Она используется для создания любых видов 
графиков: линейных, круговых диаграмм, построчных гистограмм и других — в зависимости от задач.
Библиотека Matplotlib — это пакет для визуализации данных в Python. Pyplot — это модуль в пакете Matplotlib. 
Его вы часто будете видеть в коде как matplotlib.pyplot. Модуль помогает автоматически создавать оси, фигуры и другие
 компоненты, не задумываясь о том, как это происходит. Именно Pyplot используется в большинстве случаев.
Pylab — это ещё один модуль, который устанавливается вместе с пакетом Matplotlib. Он одновременно импортирует Pyplot 
и библиотеку NumPy для работы с массивами в интерактивном режиме или для доступа к функциям черчения при работе
 с данными.
 Matplotlib — универсальная библиотека, которая работает в Python на Windows, macOS и Linux. При работе с Google
  Colab или Jupyter Notebook устанавливать Python и Matplotlib не понадобится — язык программирования и библиотека 
  уже доступны «из коробки». """

import matplotlib.pyplot as plt
"""Для начала создадим две переменные — x и y, которые будут содержать координаты точек по осям х и у: """
x = [1, 2, 3, 4, 5]
y = [25, 32, 34, 20, 25]
"""Теперь построим график, который соединит эти точки:"""
plt.plot(x, y)
plt.show()

"""Библиотека изображений Python, или PIL (Python Imaging Library) нужна для обработки графики в Python. Фредрик
 Лунд является автором одного из лучших блогов, посвященных Python. Однако он перестал обновляться в далеком 
 2009 году, незадолго до последнего релиза PIL. К счастью, нашлись разработчики Python, что подхватили проект,
  создав форк PIL под названием Pillow. Pillow стал заменой оригинальной библиотеки PIL. Он также поддерживает 
  Python 3, чего PIL так и не достиг.
  Установить Pillow в Python можно через pip или easy_install. Установка через pip выполняется следующим образом:
pip3 install pillow"""
from PIL import Image
"""Через Pillow можно легко открыть изображение и отобразить его на экране через внешнюю программу"""
image = Image.open('jelly.jpg')
image.show()
"""для обрезки изображения Image.crop()
Image.rotate() возвращает развернутую копию изображения
from PIL import Image
import sys
 
try:
    tatras = Image.open("tatras.jpg")
except IOError:
    print("Unable to load image")
    sys.exit(1)
    
rotated = tatras.rotate(180)
rotated.save('tatras_rotated.jpg')
Данная программа поворачивает изображения на 180 градусов и сохраняет файл результат в виде новой картинки на диск."""